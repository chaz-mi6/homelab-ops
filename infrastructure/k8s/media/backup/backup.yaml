---
apiVersion: v1
kind: Secret
metadata:
  name: media-backup-secret
  namespace: media
type: Opaque
data:
  # These will be populated by external-secrets from Vault
  s3-access-key: ""
  s3-secret-key: ""
  encryption-key: ""
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: media-config-backup
  namespace: media
spec:
  schedule: "0 3 * * *"  # Daily at 3 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: restic/restic:latest
            command:
            - /bin/sh
            - -c
            - |
              set -e
              export RESTIC_REPOSITORY="s3:https://s3.amazonaws.com/homelab-media-backup"
              export RESTIC_PASSWORD_FILE=/secrets/encryption-key
              export AWS_ACCESS_KEY_ID=$(cat /secrets/s3-access-key)
              export AWS_SECRET_ACCESS_KEY=$(cat /secrets/s3-secret-key)
              
              # Initialize repository if it doesn't exist
              restic snapshots || restic init
              
              # Backup all application configurations
              restic backup \
                /backups/sonarr \
                /backups/radarr \
                /backups/prowlarr \
                /backups/transmission \
                /backups/plex \
                --tag media-config \
                --exclude="*.log" \
                --exclude="cache/*" \
                --exclude="logs/*" \
                --exclude="Plex Media Server/Cache/*" \
                --exclude="Plex Media Server/Logs/*"
              
              # Cleanup old snapshots (keep 30 daily, 12 weekly, 12 monthly)
              restic forget \
                --keep-daily 30 \
                --keep-weekly 12 \
                --keep-monthly 12 \
                --prune
              
              # Check repository integrity weekly
              if [ "$(date +%u)" = "7" ]; then
                restic check
              fi
            env:
            - name: TZ
              value: "Europe/London"
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: sonarr-config
              mountPath: /backups/sonarr
              readOnly: true
            - name: radarr-config
              mountPath: /backups/radarr
              readOnly: true
            - name: prowlarr-config
              mountPath: /backups/prowlarr
              readOnly: true
            - name: transmission-config
              mountPath: /backups/transmission
              readOnly: true
            - name: plex-config
              mountPath: /backups/plex
              readOnly: true
            resources:
              requests:
                memory: 256Mi
                cpu: 100m
              limits:
                memory: 1Gi
                cpu: 500m
          volumes:
          - name: secrets
            secret:
              secretName: media-backup-secret
          - name: sonarr-config
            persistentVolumeClaim:
              claimName: sonarr-config-pvc
          - name: radarr-config
            persistentVolumeClaim:
              claimName: radarr-config-pvc
          - name: prowlarr-config
            persistentVolumeClaim:
              claimName: prowlarr-config-pvc
          - name: transmission-config
            persistentVolumeClaim:
              claimName: transmission-config-pvc
          - name: plex-config
            persistentVolumeClaim:
              claimName: plex-config-pvc
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: media-database-backup
  namespace: media
spec:
  schedule: "30 2 * * *"  # Daily at 2:30 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: db-backup
            image: postgres:15-alpine
            command:
            - /bin/sh
            - -c
            - |
              set -e
              
              # Create backup directory
              mkdir -p /backup/$(date +%Y%m%d)
              
              # Backup Sonarr database
              if [ -f /config/sonarr/sonarr.db ]; then
                sqlite3 /config/sonarr/sonarr.db ".backup /backup/$(date +%Y%m%d)/sonarr.db"
                sqlite3 /config/sonarr/logs.db ".backup /backup/$(date +%Y%m%d)/sonarr-logs.db" || true
              fi
              
              # Backup Radarr database
              if [ -f /config/radarr/radarr.db ]; then
                sqlite3 /config/radarr/radarr.db ".backup /backup/$(date +%Y%m%d)/radarr.db"
                sqlite3 /config/radarr/logs.db ".backup /backup/$(date +%Y%m%d)/radarr-logs.db" || true
              fi
              
              # Backup Prowlarr database
              if [ -f /config/prowlarr/prowlarr.db ]; then
                sqlite3 /config/prowlarr/prowlarr.db ".backup /backup/$(date +%Y%m%d)/prowlarr.db"
                sqlite3 /config/prowlarr/logs.db ".backup /backup/$(date +%Y%m%d)/prowlarr-logs.db" || true
              fi
              
              # Compress and encrypt backups
              tar -czf /backup/media-db-$(date +%Y%m%d).tar.gz -C /backup $(date +%Y%m%d)/
              
              # Upload to S3 using AWS CLI
              export AWS_ACCESS_KEY_ID=$(cat /secrets/s3-access-key)
              export AWS_SECRET_ACCESS_KEY=$(cat /secrets/s3-secret-key)
              
              aws s3 cp /backup/media-db-$(date +%Y%m%d).tar.gz \
                s3://homelab-media-backup/databases/media-db-$(date +%Y%m%d).tar.gz \
                --storage-class STANDARD_IA
              
              # Cleanup local files older than 3 days
              find /backup -name "*.tar.gz" -mtime +3 -delete
              find /backup -type d -empty -delete
            env:
            - name: TZ
              value: "Europe/London"
            volumeMounts:
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: backup-storage
              mountPath: /backup
            - name: sonarr-config
              mountPath: /config/sonarr
              readOnly: true
            - name: radarr-config
              mountPath: /config/radarr
              readOnly: true
            - name: prowlarr-config
              mountPath: /config/prowlarr
              readOnly: true
            resources:
              requests:
                memory: 128Mi
                cpu: 50m
              limits:
                memory: 512Mi
                cpu: 200m
          volumes:
          - name: secrets
            secret:
              secretName: media-backup-secret
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage-pvc
          - name: sonarr-config
            persistentVolumeClaim:
              claimName: sonarr-config-pvc
          - name: radarr-config
            persistentVolumeClaim:
              claimName: radarr-config-pvc
          - name: prowlarr-config
            persistentVolumeClaim:
              claimName: prowlarr-config-pvc
          restartPolicy: OnFailure
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: backup-storage-pvc
  namespace: media
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: backup-restore-job
  namespace: media
spec:
  template:
    spec:
      containers:
      - name: restore
        image: restic/restic:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "Backup restore job ready. To restore, exec into this pod and run:"
          echo "restic snapshots"
          echo "restic restore <snapshot-id> --target /restore"
          sleep 3600
        env:
        - name: RESTIC_REPOSITORY
          value: "s3:https://s3.amazonaws.com/homelab-media-backup"
        - name: RESTIC_PASSWORD_FILE
          value: "/secrets/encryption-key"
        - name: AWS_ACCESS_KEY_ID_FILE
          value: "/secrets/s3-access-key"
        - name: AWS_SECRET_ACCESS_KEY_FILE
          value: "/secrets/s3-secret-key"
        volumeMounts:
        - name: secrets
          mountPath: /secrets
          readOnly: true
        - name: restore-target
          mountPath: /restore
        resources:
          requests:
            memory: 256Mi
            cpu: 100m
          limits:
            memory: 1Gi
            cpu: 500m
      volumes:
      - name: secrets
        secret:
          secretName: media-backup-secret
      - name: restore-target
        emptyDir: {}
      restartPolicy: Never
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
  parallelism: 1
  completions: 1
  backoffLimit: 3
  suspend: true  # Job is suspended by default